Solutions to AY-250 Homework 5
Author: Sean Wahl
University of California, Berkeley
Tue Oct  8 23:51:48 PDT 2013
--------------------------------------------------------------------------------
Problem 1: Write an XML-RPC server/client program pair.
--------------------------------------------------------------------------------















--------------------------------------------------------------------------------
Problem 2: Write a program that identifies musical notes from sound (AIFF) files
--------------------------------------------------------------------------------

hw_05_audio.ipynb:

Ipython notebook file containing entire solution to Problem 2:

    Testing and Plotting audio data:
        Contains brief tests demonstrating how audiofiles are parsed, and a
        fourier transform ia taken to identify peaks.

    Musical Note reference:
        Provides necessary information for the code to break up frequency space
        into regions that are nearest to the perfect frequency of any note. 
        Considers notes 4 octaves below or above C4.

    Function Definitions:
        Functions for parsing audiofiles, finding peaks, and excluding false
        positives.

        audio2Farray(audio_file):
            ''' Takes path to audiofile and returns an ndarray containing the positive
            portion of sample's fourier transform, with a corresponding array of 
            frequencies. If the file has multiple channels, only the first channel is used.'''

        findPeaks(F,freq,amp_tol):
            ''' Algorithm to find peaks by searching frequeny ranges for a maximum above some 
            fraction of the global maximum amplitude. Returns the elements in notes for which this 
            criteria holds. Returns list of tuples containing (fit frequency, frequency of closest
            note, label of closest note)'''

        detectBleed(peaklist,width=0.25):
            '''Detect situation where the neighboring note is falsely detected, by checking that
            the neighboring note has a lower maximum, and that maxium is in the nearest portion
            of size 'width' in its range to the correct note.'''

        removeHarmonics(peakslist,width=.5):
            ''' Remove any higher harmonics from a list of identified peaks. The
            tolerance for finding a harmonic is:
            ('width') x ( search range of fundamental ) x ( harmonic order )
        
            Note: This method will remove correct notes that happen to be a harmonic
            of a lower note (such as playing notes an octave apart'''

    Testing Functions:
        For testing functions on tuning parameters on sample data with known notes.

    Classifying unknown audio files:
        List detected notes along with excluded false-positives and harmonics for
        the provided, unclassified audio files. Returns fit frequency and name
        of identified note. Harmonics include possible note along with the 
        fundamental and order of the harmonic.

--------------------------------------------------------------------------------

Results:


./sound_files/1.aif:
    Unique Fundamental Notes:
    261.6-C4 293.0-D4 391.3-G4 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    522.5-C5(2*C4) 586.6-D5(2*D4) 784.4-G5(3*C4) 879.7-A5(3*D4) 1172.9-D6(4*D4) 1564.9-G6(6*C4) 1760.1-A6(6*D4) 2351.8-D7(9*C4) 

./sound_files/2.aif:
    Unique Fundamental Notes:
    174.6-F3 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    348.5-F4(2*F3) 522.5-C5(3*F3) 699.4-F5(4*F3) 1047.4-C6(6*F3) 2788.4-F7(16*F3) 

./sound_files/3.aif:
    Unique Fundamental Notes:
    433.8-A4 
    Ruled out as false-positives:
    458.1-A#/Bb4 
    Ruled out as harmonics:
    897.9-A5(2*A4) 1304.1-E6(3*A4) 1358.0-F6(3*A4) 

./sound_files/4.aif:
    Unique Fundamental Notes:
    261.6-C4 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    523.1-C5(2*C4) 783.8-G5(3*C4) 1046.2-C6(4*C4) 1567.4-G6(6*C4) 2092.3-C7(8*C4) 3134.9-G7(12*C4) 4184.6-C8(16*C4) 

./sound_files/5.aif:
    Unique Fundamental Notes:
    97.9-G2 146.8-D3 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    195.9-G3(2*G2) 292.9-D4(3*G2) 493.1-B4(5*G2) 

./sound_files/6.aif:
    Unique Fundamental Notes:
    523.1-C5 4184.6-C8 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    1046.2-C6(2*C5) 1567.4-G6(3*C5) 2092.3-C7(4*C5) 3134.9-G7(6*C5) 

./sound_files/7.aif:
    Unique Fundamental Notes:
    586.6-D5 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    1172.9-D6(2*D5) 1760.1-A6(3*D5) 2351.8-D7(4*D5) 

./sound_files/8.aif:
    Unique Fundamental Notes:
    348.5-F4 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    699.4-F5(2*F4) 1047.4-C6(3*F4) 

./sound_files/9.aif:
    Unique Fundamental Notes:
    195.9-G3 201.9-G#/Ab3 
    Ruled out as false-positives:
    190.0-F#/Gb3 
    Ruled out as harmonics:
    391.3-G4(2*G3) 586.6-D5(3*G3) 

./sound_files/10.aif:
    Unique Fundamental Notes:
    65.4-C2 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    130.8-C3(2*C2) 195.9-G3(3*C2) 391.3-G4(6*C2) 1047.4-C6(16*C2) 

./sound_files/11.aif:
    Unique Fundamental Notes:
    82.4-E2 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    164.8-E3(2*E2) 246.9-B3(3*E2) 328.9-E4(4*E2) 493.1-B4(6*E2) 987.4-B5(12*E2) 1318.1-E6(16*E2) 

./sound_files/12.aif:
    Unique Fundamental Notes:
    65.4-C2 
    Ruled out as false-positives:
    
    Ruled out as harmonics:
    130.8-C3(2*C2) 195.9-G3(3*C2) 261.6-C4(4*C2) 391.9-G4(6*C2) 523.1-C5(8*C2) 659.1-E5(10*C2) 1046.2-C6(16*C2)
